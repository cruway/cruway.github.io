1. 根本Entityとして分割
Joinは'RDBMS'の花と言う。なぜJoinがRDBMSの花なのかを確認しよう。

- Joinを使用しない場合のデータアクセスの量：280MB
- Joinを使用する場合のデータアクセスの量：60MB + 115KB = 略 60MB

結局、テーブルデータをすべてサクセスする場合はJoinを使用しない構造でアクセスするデータ量は60MBで、Joinを使用しない
場合はアクセスをするデータ量に比べて倍以上アクセスするデータ量が減少する。

性能はアクセスをするデータ量と比例してJoinを使用する場合がもっと早い性能を保証できるのは事実である。もちろん、
Joinを利用する場合がアクセスするデータ量は60MBで、Joinを使用しない場合と比べてアクセス量は4倍以上減少するが、
使用するJoinの方式によりJoin負荷が発生する。

二つ目は少ないデータでアクセスする場合はどうでしょ？Jonを使用しない場合とJoinを使用する場合を分離して差異を確認しよう。

- Joinを使用しない場合：ランダムアクセスが発生しない。
- Joinを使用する場合：ランダムアクセスが発生。

少ないデータをアクセスする場合、Joinを使ったらランダムアクセスが発生してその量が多かったら性能が低下する。しかし、
少ないデータをアクセスする場合はランダムアクセスも少なく発生して、Joinが最適化ができたら性能低下が発生しなくなる。

そしてJoinの最適化を通じてアクセスするランダムアクセスの量を減少ができる。ランダムアクセスの発生は性能を低下
するが、これは十分にSQL最適化で解決できる。

このようにJoinは効果的に使うとテーブルのデータを減少して性能を保証できる。そして、重複データを除去することができて
データの整合性が保証される。

このような理由でRDBMSでJoinは花と呼ぶ。もちろん、間違えたJoinは想像を超える性能低下を発生させることを覚える必要がある。

結局、根本Entity分割はデータ整合性及び全体データベースの大きさ減少のため必要である。でもJoinに関する性能低下に
関してはSQL最適化を行う必要がある。

「表1」Entity分割による現象
・オンライン処理
  - 統合Entity：有利
  - Subset分離Entity：不利
  - 備考：根本EntityのAttribute抽出し、Join発生で性能低下が可能

・バッチ処理
  - 統合Entity：不利
  - Subset分離Entity：有利
  - 備考：根本Entityに分割する場合、大きさが小さくなって有利

・業務柔軟性(Subset別)
  - 統合Entity：不利
  - Subset分離Entity：有利
  - 備考：別途のEntity
  
・業務柔軟性(全体)
  
・管理
  - 統合Entity：不利
  - Subset分離Entity：有利
  - 備考：個別作業可能
  
・保存空間
  - 統合Entity：不利
  - Subset分離Entity：有利
  - 備考：コードで具現

・Data整合性
  - 統合Entity：不利
  - Subset分離Entity：有利
  - 備考：重複データ存在

・業務分析
  - 統合Entity：不利
  - Subset分離Entity：有利
  - 備考：Entity Nameで区分可能
  

1) オンライン処理：根本Entity分割はオンライン業務処理しはJoinして照会を行う必要があって不利になり。統合Entity
の場合はオンライン処理を行う場合利用しなくても有利になる。

2) バッチ処理：バッチ処理の時、根本Entityで分割する場合がEntityのサイズが小さくなり有利になる。

3) 業務柔軟性(Entity別)：Entity別で業務が変わる場合、該当Entityだけ修正すればいいので根本Entityで分離する場合が
有利になる。

4) 業務柔軟性(全体)：全体業務柔軟性は根本Entityで分離することとは関係がないので二つすべて同一する。

5) 管理：根本Entityで分離する場合はデータと分離して作業が可能になるので根本Entityを分離する場合がもっと有利になる。

6) 保存空間：根本Entityで分離する場合Entityの大きさが減少して保存空間は減少する。

7) Data整合性：根本Entityで分離する場合、重複データを除去して性能は向上する。

8) 業務分析：根本Entityにより、分離Entityの場合Entityが分離ができていて有利になる。

根本Entityとしての分離は統合Entityに比べて長所が多い、Entity分割が有利になり、音来院処理に関してSQL最適化は
必ず必要な段階である。
