結合インデックスを構成するカラムの順番
インデックスを利用して性能向上の効果を期待したいならまず、該当のインデックスを利用し処理範囲を最大限に減少しな
ければならない。性能を向上するためには結合インデックスを構成するカラムは必ず次の順番に合うように生成する必要がある。

・1番：カラムを使用する演算子によるインデックス選定
・2番：ランダムアクセスを考慮したインデックスカラム選定
・3番：整列除去するためのインデックスカラム選定
・4番：単一カラムの分布図を考慮したインデックスカラム選定

この4段階優先順位によって我々は結合インデックスを生成する。この優先順位を守らないとそもそも該当インデックスを
利用した性能向上は難しくなる。

もちろん、結合インデックスを生成する優先順位でWHERE条件で使うカラムをインデックス構成することは当然のことで除外
した。該当SQLで使わないカラムを特別な理由なしでインデックスに追加するのはあまり多くない。

こんな結合インデックス構成ルールはなぜ作られたのか？少し考えるとこの回答はすぐ出るはずだ。ディスクのI/Oを減少
するためだ。

結局、こんな優先順位でインデックスを生成すると我々が望むデータを抽出するときに、最小限のディスクI/Oを発生して
性能を保証することができる。


結合インデックスを構成するカラム演算子に注目

インデックスを生成する場合、該当のカラム分布図を考慮する場合が多い。これは間違えた知識から始まったエラーである。
次の例を通じてインデックスを生成すると仮定しよう
SELECT カード番号、使用額
FROM 取引内訳
WHERE カード番号 = '111'
AND 取引日付 BETWEEN '20080501'
             AND '20080510';
例みたいにSQLを実行する場合はどうですか？カード番号カラムの分布図はとても良いで取引日付カラム分布図はとても悪いと
仮定しよう。

分布図が良いという意味は該当のテーブルでカード番号の値が'111'を満足するデータがとても少ないという意味だ。分布図
が悪いという意味はこれとは違う反対の意味を持つ。

従って、分布図が良いカラムであるカード番号カラムをインデックスの一番前に置いといて分布図が悪い取引日付カラムを
後ろに構成すると仮定しよう

そうしたらインデックスはカード番号+取引日付インデックスになり、これはカラム分布図を考慮してインデックスを生成する場合だ。

こうしてにインデックスを構成したらカード番号カラムの値によって処理範囲が減少できて取引日付カラムによっても処理範囲が
減少できて臨むデータに関して最小のアクセスで結果を抽出することができる。

この例を通じて分布図が良いカラムを前にしてインデックスを構成することができるんでしょ？という話をすることができるが。

次の例を確認しよう。

SELECT カード番号、使用額
FROM 取引内訳
WHERE カード番号 BETWEEN '111'
                 AND '555'
AND 取引日付 = '20080515'

今回はカラムの分布図のみ考えてカード番号+取引日付インデックスを生成したらカード番号カラムによってのみ処理範囲が
減少して我々は性能低下を経験するしかない。

'111'カード番号から'555'カード番号まで2008年5月15日データのみアクセスすることではなく'111'カード番号から'555'
カード番号まですべてのデータをアクセスするからだ。

結局、取引日付カラムの処理範囲は減少できなくなる。

確かにカラムの分布図が良いカラムをインデックス前に置いといたけど処理範囲はカード番号カラムによってのみ減少する。

このような現象が発生する理由はカラム分布図が結合インデックスを構成する重要な要素ができないことを意味する。これは
我々がいつも話をする分布図で我々が自ら罠にはまるからだ。
カード番号値の唯一値(UNIQUE)で管理するカード_MASTERテーブルにはカード番号カラムが分布図が良いと話をした。

このような話は深い意味が包んでいる。

我々がいつも話をする分布図とは = で照会をする場合だ。カード_MASTERテーブルのカード番号カラムがどんだけ分布図が
良いとしてもカード番号LIKE'1%'であり、該当のカード番号値はすべて1で始まったらこれは絶対に分布図が良いとは限らない。

この理由で結合カラムインデックス設定ではLIKEなど線分条件も多く使うので分布図ではなく演算子が重要になることだ。

そして、前の値が未知数なら我々は後ろの値を知ったとしてもインデックスはまじめに使うことができなくなる。

例えば、辞書で'G??L'という単語を探したいならどうだか？

Gという前の単語により
我々はGで始まる単語だけアクセスができるが、後ろに明示しているLのアクセス範囲は減少できなくて確認をする役割を
修行する。

データベースのインデックスもこれとは違いない。それで、我々は前の講座話したように次のインデックスを生成すること。
・点条件 + 点条件：二つの条件によって処理範囲減少
・点条件 + 線分条件：二つの条件によって処理範囲減少
・線分条件 + 線分条件：前の条件によって処理範囲
・線分条件 + 点条件：前の条件によってのみ処理範囲

上記みたいに演算子によって処理範囲が決まり、我々は最小限度処理範囲を保証するためには点条件(=,IN)前に線分条件
(=, INを除く演算子)が存在したらだめだ。

結合インデックスのカラム順番は該当カラムが使う演算子がとても重要な役割を修行する。次の講座では二つの優先順位
であるランダムアクセスを考慮したインデックス選定について詳しく話をしよう。
