ランダムアクセスを理解しよう
結合インデックスのカラム順番は四つの優先順位により生成する。優先順位を間違えてインデックスを生成すると我々は
該当のインデックスを利用して性能向上を期待することは難しい。

・1番：カラムを使用した演算子によるインデックスカラム選定
・2番：ランダムアクセスを考慮したインデックスカラム選定
・3番：整列除去するためのインデックスカラム選定
・4番：単一カラムの分布図を考慮したインデックスカラム選定

2番の優先順位のランダムアクセスはなんだろう？ランダムアクセスはデータを保存するブロックを1回で複数アクセスすることでは
なく1回に1個のブロックだけアクセスをする方式である。

1回で複数のブロックをサクセスしたら同じ量のデータにより、少ない回数のディスクI/Oが発生して性能向上ができる。

テーブルを最初から最後までアクセスするテーブル全体スキャン(Table Full Scan)の場合は1回で複数のブロックをアクセスをする
ことができて1回に複数のブロックをアクセスする多中ブロックI/Oを修行する。

そうしたら果たしてどんな作業でランダムサクセスが発生するのか？それはすなわちインデックスをアクセスして確認した
ROWIDを利用してテーブルをアクセスする場合、ランダムアクセスが発生する。

ROWIDは該当データを探すことができる唯一のアドレス値で我々がインデックスを利用することはインデックスより条件を
満足するインデックス値をアクセスした後、ROWIDを確認しROWID値からテーブルをアクセスすることをいみする。

このようにインデックスアクセス後テーブルをアクセスする場合発生するI/Oは1回1ブロックだけアクセスするランダムアクセスが
発生する。

ランダムアクセスの種類を分析しよう

インデックスアクセス後、テーブルをアクセスすることはランダムアクセスを発生させる。

このように発生するランダムアクセスはすべて同一なのか？だとしたら、ランダムアクセスはどんな種類が存在するのか？
我々が見た限りは同一なランダムアクセスに見えるが実際にランダムアクセスは次のように三つに分かれる

・確認ランダムアクセス
・抽出ランダムサクセス
・整列ランダムアクセス

初めに確認ランダムアクセスはなんだろうか？確認ランダムアクセスはWHERE条件により発生する。

もし、WHERE条件ではカード番号条件と取引日付条件が一緒でインデックスはカード番号カラムだけ構成していると仮定しよう。
このようであればカード番号カラムによってインデックスをアクセスする。

結局、カード番号カラムによって処理範囲が減少する。だとしたら、取引日付カラムはどんな役割を修行するのか？

確かにカード番号条件を満足するデータの中で取引日付条件を満足するデータのみ結果で抽出しなければならない。でも、
カード番号カラムのみインデックスが構成されていて取引日付条件をインデックスから確認できなくなる。

そのようにWHERE条件カラムでインデックスが存在しなくてテーブルをアクセスするランダムアクセスを確認ランダムアクセス
という。

確認ランダムアクセスの特徴はランダムアクセスの回数より最終結果が同一かもっと少なく抽出することだ。確認ランダムアクセス
はランダムアクセスが発生した後、捨てられるデータが存在する。

せっかくテーブルをアクセスした後、捨てられることはとても残念なことである。インデックスを選定することにより確認ランダムアクセス
の除去は性能によってとても重要な役割を修行する。

二つ目で抽出ランダムアクセスを確認しよう

WHERE文のカラムではなくSELECT文のカラムを確認しよう
WHERE文のカラムはすべてインデックスが存在するがSELECT文のカラムにインデックスが存在しない場合、どんな現象が発生するのか？

SELECT文のカラムの結果を抽出するためには必ずインデックスアクセス後、テーブルをアクセスすること。このような現象は
抽出ランダムアクセスに該当する。

抽出ランダムアクセスの特徴はランダムアクセスの回数は抽出データの量が同一になる。SELECT文のカラム達は抽出できるデータ
を減少したり増加することができない。

従って、抽出ランダムアクセスは発生した分結果として抽出する。

三つめは整列ランダムアクセスは抽出ランダムアクセスとほぼ同一である。

ORDER BY文など、使用したカラムにインデックスアクセスが存在しなくてテーブルをアクセスして整列を修行するための
データをアクセスしてランダムアクセスを発生するこおを整列ランダムアクセスという。

整列ランダムアクセスも同じくランダムアクセスの回数と抽出するデータの件数が同一になる。

前、確認したような抽出、整列ランダムアクセスはランダムアクセス回数と抽出するデータの件数は変化がない。

でも、確認ランダムアクセスは抽出するデータの件数が減少できてそれこそ捨てられるデータが存在する場合もはる。

このような理由で確認ランダムアクセスがランダムアクセスの中で一番負荷を発生し、我々は最優先的に確認ランダムアクセス
を除去するために頑張らなければならない。

効果的なインデックス選定を通じて確認ランダムアクセスを除去しよう

抽出または整列ランダムアクセスを除去することは性能を向上するが、優先的には確認ランダムアクセスを除去することである。

SELECT カード番号、使用額
FROM 取引内訳
WHERE カード番号 = '111'
AND 取引日付 BETWEEN '20080501'
AND '20080510'

取引内訳テーブルはカード番号+加盟店インデックスが存在すると仮定しよう。そしてカード番号+取引日付インデックスは
追加で生成することはできないと仮定しよう

インデックス追加及び削除が運営しているシステムではとても危険な作業にもなる。そして、カード番号カラムはインデックス
の1番目カラムでインデックスではアクセスする処理範囲を減少する。

でも、取引日付カラムはインデックスが存在しないのでインデックスでその値を確認することはできない。従って、取引日付
カラムの値を確認するためにテーブルをアクセスする必要があるし、アクセスデータの中で取引日付条件を満足するための
データだけ結果として抽出する。

上みたいなランダムアクセスは確認ランダムアクセスに該当するでしょ。

この場合、既存のインデックスで取引日付カラムを追加したらどうなろうか？

カード番号+加盟店+取引日付インデックスを生成したら取引日付カラムの前に加盟店カラムが存在して、取引日付カラムの
処理範囲を減少する役割は修行できないが、取引日付カラムがインデックスに存在することができて確認ランダムアクセスは
発生しなくなる。

このようにインデックスを調整して確認ランダムアクセスを除去することができる。このようにランダムアクセスを除去する
方法こそ、該当SQLの性能を向上する方法になる。
